#!/usr/bin/env python3
# -*- coding: utf-8 -*-

#-----------------------------------------------------------------------
#~ The MIT License (MIT)
#~ 
#~ Copyright (c) 2015 James Heald <jhdoubleoseven@gmail.com>
#~ 
#~ Permission is hereby granted, free of charge, to any person obtaining a copy
#~ of this software and associated documentation files (the "Software"), to deal
#~ in the Software without restriction, including without limitation the rights
#~ to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
#~ copies of the Software, and to permit persons to whom the Software is
#~ furnished to do so, subject to the following conditions:
#~ 
#~ The above copyright notice and this permission notice shall be included in all
#~ copies or substantial portions of the Software.
#~ 
#~ THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#~ IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#~ FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
#~ AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
#~ LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
#~ OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
#~ SOFTWARE.
#-----------------------------------------------------------------------

# Import our modules
from sys import exit
import random, os, argparse, string, imp, curses
from os.path import exists

parser = argparse.ArgumentParser()
parser.add_argument("-d", "--dictionary", 
        help="specify text file for words (must be encoded in hex)")
parser.add_argument("-l", "--level", type=int, choices=[1,2,3],
        help="""choose a difficulty level (default is 1): 
                level 1 is fifteen incorrect guesses,
                level 2 is ten incorrect guesses
                and level 3 is five incorrect guesses
                                        """)
parser.add_argument("-r", "--random", action="store_true",
                help = "choose random word from dictionary")
parser.add_argument("--no-color", action="store_true",
                help = "turn off color")
args = parser.parse_args()

## Functions
# This retrieves the word to guess 
def get_word():
    if args.random:  
        if exists("random.txt"):  
            dict_file = "random.txt" 
            # Open the file then make a list of all the lines       
            hang_list = open(dict_file).read().splitlines()
            # Remove any blank lines    
            hang_list = list(filter(None, hang_list))
            word = random.choice(hang_list)
            word = bytes.fromhex(word).decode('utf-8')	

        else:      
            try:
                imp.find_module('requests')   
            except ImportError:
                print("Unable to locate dictionary. Please install the 'requests' module or supply a 'random.txt' file.")
                exit(0)

            import requests
            word_site = "http://svnweb.freebsd.org/csrg/share/dict/words?view=co&content-type=text/plain"
            response = requests.get(word_site)
            words = response.content.splitlines()
            word = random.choice(words)

    elif args.dictionary:
        dict_file = args.dictionary
        hang_list = open(dict_file).read().splitlines()
        hang_list = list(filter(None, hang_list)) 
        word = random.choice(hang_list)
        word = bytes.fromhex(word).decode('utf-8') 


    else:
        print(''' 
        No dictionary selected. Please either use a random word with
        the "-r" option or choose a dictionary file with "-d".
        ''')
        exit(0)	

    # Change any uppercase letters in the word to lowercase
    word = word.lower()
    return word

def get_tries():
    if args.level:
        tries = 20 - args.level * 5
    else:
        tries = 15
    return tries

def compare_words(word):
    new_word = ''
    for char in word:
        if char in guesses: 
            new_word += char
        else:
            new_word += " _ "
    return new_word	

try:
    imp.find_module('termcolor')
    found = True
except ImportError:
    found = False

if args.no_color:
    correct_msg = "Correct!"
    inncor_msg = "Incorrect. You have %d tries left."
    win_msg = "You won! Good job! The word was %s"
    lose_msg = "You lose! The word was %s" 
    err_msg_let = "Please enter only letters."
    err_msg_one = "Please enter only one character."
    err_msg_gss = "That letter has already been guessed." 

elif found:
    from termcolor import colored
    correct_msg = colored("Correct!", 'green', attrs=['bold'])
    incor_msg = colored("Incorrect. You have %d tries left.", 'red', attrs=['bold'])
    win_msg = colored("You won! Good job! ", 'green', attrs=['bold']) + "The word was %s"
    lose_msg = colored("You lose! ", 'red', attrs=['bold']) + "The word was %s" 
    err_msg_let = colored("Please enter only letters.", 'magenta', attrs=['bold'])
    err_msg_one = colored("Please enter only one character.", 'magenta', attrs=['bold'])
    err_msg_gss = colored("That letter has already been guessed.", 'red', attrs=['bold'])

else:
    correct_msg = "\033[1;32mCorrect!\033[0m"
    incor_msg = "\033[1;31mIncorrect. You have %d tries left.\033[0m"
    win_msg = "\033[1;32mYou won! Good job!\033[0m The word was %s"
    lose_msg = "\033[1;31mYou lose!\033[0m The word was %s"
    err_msg_let = "\033[1;35mPlease enter only letters.\033[0m"
    err_msg_one = "\033[1;35mPlease enter only one character.\033[0m"
    err_msg_gss = "\033[1;31mThat letter has already been guessed.\033[0m"

notnew = None



# Main loop
while True:
    # This initializes (and later resets) our variables
    if notnew:
        pass
    else:
        guesses = ''
        word = get_word()	
        tries = get_tries()
        notnew = True


    new_word = compare_words(word)

    while True:
        letter = input("Guess a letter: ")
        if len(letter) == 1:
            if letter in string.ascii_letters:
                break
#E            print(err_msg_let)
        else:
#E            print(err_msg_one)

    letter = letter.lower()

    if letter in guesses:
#E        print(err_msg_gss)
        continue
    else:
        guesses += letter

    new_word = compare_words(word)	

    if letter not in word:
        tries -= 1
#F        print(incor_msg % tries)
    else:
#F        print(correct_msg)

#S    print("\nCurrent guesses: %s" % guesses)
#S    print("%s\n\n" % new_word)

    if new_word == word:
#D        print(win_msg % word)
#D2        again = input("Play again? (Y/n) > ")
        if again == "y" or again == "Y": 
            notnew = None
        else:
            exit(0)	
    elif tries == 0:
#D        print(lose_msg % word)
#D        again = input("Play again? (Y/n) > ")
        if again == "y" or again == "Y": 
            notnew = None
        else:
            exit(0)	
    else:
        continue





